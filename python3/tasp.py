#!/usr/bin/python3.7
'''
TASP - The Aggressively Simplified Packager
===========================================

  This is an experimental prototype script.
  Expect dirty hacks and fragile implementation.

  Principal:
  1. Requires as less code as possible in order to create a working package.
     As a result, the user should be able to create working package without
     reading documentation, regardless of the policy.
  2. Provides smooth transition to advanced packaging, which may require the
     packager to read some document including Policy.

  Assumptions:
  1. The upstream provides a standard build system, or provide no build system.
  2. A source package only produces one binary package.

  Make your own Debian package with a single deb-control-like file.
  This script aims to make the process of packaging as simple as possible.
  At the same time, the script tries its best to stick to Debian Policy,
  but that's not the first priority.

Copyright (C) 2018 Mo Zhou <cdluminate@gmail.com>
License: GPL-3+
'''
from typing import *
from dataclasses import dataclass
from collections import OrderedDict
import argparse
import os, re, sys
import time


@dataclass
class ASDFConfiguration:
    compat: int = 11
    stdver: str = '4.1.5'
    asdf = f'''\
###############################################################################
## Automatically Generated by {__file__} at {time.ctime()}
## Lines starting with '#' can be omitted.
## File-Format: RFC-822
###############################################################################
''' + '''\
Package: #SOURCE# #VERSION# #REVISION#
Description: #SHORT_DESCRIPTION#
Section: #SECTION#
Maintainer: #MAINTAINER#
Explicit-Build-Depends: #BUILD_DEPENDS#
Explicit-Runtime-Depends: ${misc:Depends}, ${shlibs:Depends}, ${python3:Depends}
#Upstream-Git: #UPSTREAM_GIT#
Upstream-Homepage: #HOMEPAGE#
Upstream-License: #LICENSE#
Debhelper-With: #WITH#
# Packaging-Git: #VCS_GIT#
Packageing-License: #PACKAGING_LICENSE#
# Configure: #CONFIGURE#
# Install: #INSTALL#
# Changelog: #CHANGELOG#
# Extra-CPPFLAGS:
# Extra-CFLAGS:
# Extra-CXXFLAGS:
# Extra-FFLAGS:
# Hardening:
'''


class Deb822(object):
    '''
    Read/Write deb822 format files.
    Deb822 class itself keeps a List[OrderedDict[...]]
    '''
    def __init__(self):
        self.article = []

    @staticmethod
    def loads(contents):
        raise NotImplementedError

    @staticmethod
    def dumps(contents):
        raise NotImplementedError


def act_template(ag):
    '''
    Create a ASDF template in the current directory
    '''
    if os.path.exists(ag.file):
        raise FileExistsError(f'{ag.dest} already exists!')
    with open(ag.file, 'w') as f:
        f.write(ASDFConfiguration().asdf)


def act_translate(ag):
    '''
    Generate the debian/ directory from the provided .asdf file.
    '''
    raise NotImplementedError


if __name__ == '__main__':
    ag = argparse.ArgumentParser()
    ag.add_argument('action', type=str, choices=['template', 'translate'])
    ag.add_argument('-f', '--file', type=str, required=True)
    ag = ag.parse_args()

    eval(f'act_{ag.action}')(ag)
