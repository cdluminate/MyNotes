#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme{Boadilla}
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\maintain_unincluded_children no
\language english
\language_package default
\inputencoding utf8
\fontencoding auto
\font_roman "times" "default"
\font_sans "biolinum" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement class
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
Adversarial Attack and Defense
\end_layout

\begin_layout Subtitle
\begin_inset Quotes eld
\end_inset

AI Security Issues
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Author
Mo Zhou
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Vishal M.
 Patel
\end_layout

\begin_layout Institute
Deep Learning (EN.520.638)
\begin_inset Newline newline
\end_inset

Spring 2025
\begin_inset Newline newline
\end_inset

Johns Hopkins University
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Safety & Security Issues of AI
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Section 1:
 Safety & Security Issues of AI
\end_layout

\end_inset


\end_layout

\begin_layout Frame
There are lots of deep learning applications in real-world.
 But how secure are them?
 How robust are they when they face malicious users?
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Deep learning models have a wide range of use cases.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[1] ImageNet Classification with Deep Convolutional Neural Networks (Alexnet)
\end_layout

\begin_layout Standard
Example in computer vision:
 image classification.
\end_layout

\begin_layout Columns

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.65
\backslash
columnwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted2.png
	special width=\linewidth

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.35
\backslash
columnwidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted1.png
	special width=\linewidth

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Input:
 RGB image of shape (224,
 224,
 3)
\end_layout

\begin_layout Standard
Output:
 Category probability for 1000 classes (from ImageNet dataset).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Deep learning models have a wide range of use cases.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[2] Fast R-CNN,
 https://arxiv.org/pdf/1504.08083
\end_layout

\end_deeper
\begin_layout Frame
Example in computer vision:
 object detection.
\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename pasted3.png
	special width=\linewidth

\end_inset


\end_layout

\begin_layout Frame
Input:
 RGB image.
\end_layout

\begin_layout Frame
Output:
 a number of (bounding boxes,
 classification result).
\end_layout

\begin_layout Frame
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Quotes eld
\end_inset

what objects are in this image,
 and where are they?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Deep learning models have a wide range of use cases.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[3] Language Models are Unsupervised Multitask Learners (GPT-2)
\end_layout

\end_deeper
\begin_layout Frame
Example in computational linguistics:
 next-word prediction.
\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Language Modeling
\end_layout

\end_inset


\end_layout

\begin_layout Block
Assume we have a natural language example 
\begin_inset Formula $x,$
\end_inset

 which is composed of a sequence of tokens 
\begin_inset Formula $(s_{1,}s_{2},\ldots,s_{n})$
\end_inset

.
 Since language has a natural sequential ordering,
 it is common to factorize the joint probabilities over tokens as the product of conditional probabilities,
 i.e.,
\end_layout

\begin_layout Block
\begin_inset Formula 
\[
p(x)=p(s_{1},s_{2},\ldots,s_{n})=\prod_{i=1}^{n}p(s_{n}|s_{1},\ldots,s_{n-1})
\]

\end_inset


\end_layout

\begin_layout Standard
Input:
 previous tokens (e.g.,
 an unfinished sentence)
\end_layout

\begin_layout Standard
Output:
 the next token (or word)
\end_layout

\begin_layout Standard
Auto-regressive:
 append the predicted token to input,
 and predict again.
\end_layout

\end_deeper
\begin_layout Subsection
Vulnerabilities exist in all deep learning models.
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Are deep learning models reliable?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[4] Explaining and Harnessing Adversarial Examples (ICLR 2015)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted5.png
	special width=\linewidth

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Are deep learning models reliable?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[5] Adversarial Patch,
 https://arxiv.org/pdf/1712.09665
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted4.png
	special width=\linewidth

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Are deep learning models reliable?
 
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[6] Robust Physical-World Attacks on Deep Learning Visual Classification,
 CVPR 2018
\end_layout

\begin_layout Columns

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
linewidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted6.png
	special width=\linewidth

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
linewidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted7.png
	special width=\linewidth

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Language models too...
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[7] Jailbreaking Black Box Large Language Models in Twenty Queries
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted8.png
	special width=\linewidth

\end_inset


\end_layout

\begin_layout Standard

\series bold
\bar under
But today we will mainly cover the computer vision models,
 in particular image classification models.
\end_layout

\end_deeper
\begin_layout Section
Adversarial Attack:
 Compromising an AI Model
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Section 2:
 Adversarial Attack:
 Compromising a Deep Learning Model
\end_layout

\end_inset


\end_layout

\begin_layout Frame
To manipulate the input to the deep learning model,
 and hence intentionally change the output of the model.
\end_layout

\begin_layout Frame
Take 
\series bold
face recognition
\series default
 models,
 they may be attacked for:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset


\series bold
Impersonation
\series default

\begin_inset Quotes erd
\end_inset

:
 let the model recognize the user as another (high privilege) user.
\end_layout

\begin_deeper
\begin_layout Itemize
use case:
 payment authorization / phone unlock with face.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
\begin_inset Quotes eld
\end_inset

Avoiding detection
\begin_inset Quotes erd
\end_inset


\series default
:
 let the model recognize the user as anybody else.
\end_layout

\begin_deeper
\begin_layout Itemize
use case:
 criminal avoids the camera surveillance system.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
How does 
\begin_inset Quotes eld
\end_inset

Adversarial Attack
\begin_inset Quotes erd
\end_inset

 happen?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Columns

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.45
\backslash
linewidth
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
When Training A Model
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Constants:
 input image.
\end_layout

\begin_layout Itemize
Variables:
 model parameters.
\end_layout

\begin_layout Standard
The optimization algorithm (e.g.,
 SGD,
 Adam) updates the 
\series bold
model parameters
\series default
.
\end_layout

\end_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.45
\backslash
linewidth
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
When Attacking A model
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Constants:
 model parameters.
\end_layout

\begin_layout Itemize
Variables:
 input image.
\end_layout

\begin_layout Standard
The attack algorithm (e.g.,
 PGD,
 NES) updates the 
\series bold
input image
\series default
.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Definition:
 
\begin_inset Quotes eld
\end_inset

Adversarial Example
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Adversarial example is the input that triggers model misbehavior.
\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Adversarial Example (for image classification task)
\end_layout

\end_inset


\end_layout

\begin_layout Block
Given an image 
\begin_inset Formula $x$
\end_inset

,
 the adversarial example 
\begin_inset Formula $x_{adv}$
\end_inset

 is the image itself with a perturbation 
\begin_inset Formula $\delta$
\end_inset

,
\begin_inset Formula 
\[
x_{adv}=x+\delta.
\]

\end_inset


\end_layout

\begin_layout Block
It triggers the model 
\begin_inset Formula $f(\cdot)$
\end_inset

 misbehavior,
 such as untargeted attack:
\begin_inset Formula 
\[
f(x_{adv})\neq f(x)
\]

\end_inset


\end_layout

\begin_layout Block
Or targeted attack:
\begin_inset Formula 
\[
f(x_{adv})=y_{target}\neq y_{original}
\]

\end_inset


\end_layout

\begin_layout Block
The perturbation needs to be imperceptible by human (or it is too easy to tell something wrong on the image).
 The literature usually use the 
\begin_inset Formula $L_{\infty}$
\end_inset

 norm or 
\begin_inset Formula $L_{2}$
\end_inset

 norm for this constraint.
\end_layout

\end_deeper
\begin_layout Subsection
Threat Model:
 White-box,
 Grey-box,
 and Black-box.
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Threat Models:
 White-box and Black-box
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
The amount of knowledge the attacker has.
 (computer security term)
\end_layout

\begin_layout Standard

\bar under
\begin_inset Formula $\uparrow$
\end_inset

 easier,
 but less practical.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

White Box:
\end_layout

\end_inset

 The attacker has the 
\series bold
full knowledge
\series default
 about the architecture,
 the weights (parameters) of the model to be attacked.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

Gray Box:
\end_layout

\end_inset

 The attacker has 
\series bold
partial knowledge
\series default
 about the model to be architecture,
 e.g.,
 the architecture but not the parameters.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

Black Box:
\end_layout

\end_inset

 The attacker has 
\series bold
very limited knowledge
\series default
 about the model,
 e.g.,
 can only access the input and output of the model – all the rest are unknown.
\end_layout

\begin_layout Standard

\bar under
\begin_inset Formula $\downarrow$
\end_inset

more difficult,
 but more practical.
\end_layout

\end_deeper
\begin_layout Subsection
White-Box Adversarial Attacks
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
White-box Attacks
\end_layout

\end_inset


\end_layout

\begin_layout Frame
The attacker has the 
\series bold
full knowledge
\series default
 about the architecture,
 the weights (parameters) of the model to be attacked.
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
Core idea:

\series default
 gradient-based optimization.
\end_layout

\begin_layout Itemize

\series bold
Intuition:

\series default
 Move the input in the direction that increases the loss (for untargeted) or towards the target class loss.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
White-box Attack:
 Fast Gradient Sign Method
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[8] Explaining and Harnessing Adversarial Examples
\end_layout

\end_deeper
\begin_layout Frame
This is a one-step algorithm,
 in the direction of the sign of the gradient.
\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Fast Gradient Sign Method (FGSM)
\end_layout

\end_inset


\end_layout

\begin_layout Block
Let 
\begin_inset Formula $x$
\end_inset

 be input image,
 constant 
\begin_inset Formula $\epsilon$
\end_inset

 be the magnitude of perturbation,
 
\begin_inset Formula $J(\cdot)$
\end_inset

 be the objective function,
 and 
\begin_inset Formula $y$
\end_inset

 be the label.
\end_layout

\begin_layout Block
\begin_inset Formula 
\[
x_{adv}=x+\epsilon\cdot\text{sign}(\nabla_{x}J(\theta,x,y))
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Frame
Problem:
 Fast but often not optimal.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
White-box Attack:
 Basic Iterative Method
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[9] adversarial machine learning at scale
\begin_inset Newline newline
\end_inset

[10] Towards Deep Learning Models Resistant to Adversarial Attacks
\end_layout

\end_deeper
\begin_layout Frame
This is an iterative algorithm that runs multiple small steps,
 with projection back into the allowed 
\begin_inset Formula $\epsilon$
\end_inset

-ball (using the chosen 
\begin_inset Formula $L_{p}$
\end_inset

 norm).
\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Basic Iterative Method
\end_layout

\end_inset


\end_layout

\begin_layout Block
The symbol definition follows the previous page.
 The time step is denoted as 
\begin_inset Formula $t$
\end_inset

.
 The step size 
\begin_inset Formula $\alpha$
\end_inset

 should be smaller than the perturbation magnitude 
\begin_inset Formula $\epsilon$
\end_inset

.
\end_layout

\begin_layout Block
\begin_inset Formula 
\[
x_{adv}^{t+1}=\prod_{\epsilon}(x_{adv}^{t}+\alpha\cdot\text{sign}(\nabla_{x}J(\theta,x_{adv}^{t},y)))
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Frame

\color lightgray
Note,
 this is also called PGD sometimes based on whether the perturbation is randomly initialized or not.
\end_layout

\begin_deeper
\begin_layout Itemize
It is stronger than FGSM because the model is not linear,
 such that the algorithm can better exploit the input space for a better point for attack.
\end_layout

\begin_layout Itemize
PGD is often considered the standard strong baseline.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
Black-box Adversarial Attacks
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Black-box Adversarial Attacks
\end_layout

\end_inset


\end_layout

\begin_layout Frame
The attacker has 
\series bold
very limited knowledge
\series default
 about the model,
 e.g.,
 can only access the input and output of the model – all the rest are unknown.
\end_layout

\begin_deeper
\begin_layout Itemize
Transferability and universal perturbations:
\end_layout

\begin_deeper
\begin_layout Itemize
find adversarial example on a known model A.
\end_layout

\begin_layout Itemize
apply the adversarial example to an unknown model B.
\end_layout

\end_deeper
\begin_layout Itemize
Score-based and decision-based method
\end_layout

\begin_deeper
\begin_layout Itemize
Repeatedly query the target model
\end_layout

\begin_layout Itemize
use the output to estimate gradients or find adversarial examples directly
\end_layout

\begin_layout Itemize
Repeat until maximum time of query or the goal is achieved.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Black/Gray-box:
 Adversarial Example Transferrability
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[11] Improving Transferability of Adversarial Examples with Input Diversity
\begin_inset Newline newline
\end_inset


\bar under
* Agnostic to model.
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset Quotes eld
\end_inset

Transferrability
\begin_inset Quotes erd
\end_inset

:
 Adversarial examples crafted for one model often fool other models (even with different architectures).
\end_layout

\begin_layout Frame
Attack Strategy:
 Train a local "substitute" model,
 craft white-box attacks,
 and transfer them to the target black-box model.
\end_layout

\begin_layout Frame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename pasted10.png
	special width=0.7\linewidth

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Black/Gray-box:
 Universal Adversarial Perturbation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[12] Universal adversarial perturbations
\begin_inset Newline newline
\end_inset


\bar under
* Agnostic to images
\end_layout

\begin_layout Columns

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.4
\backslash
linewidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted9.png
	special width=\linewidth

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.6
\backslash
linewidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted11.png
	special width=\linewidth

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Black-box Attack:
 Natural Evolution Strategy
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[13] Black-box Adversarial Attacks with Limited Queries and Information
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $F(x)$
\end_inset

 be the objective function,
 and 
\begin_inset Formula $\pi(\theta|x)$
\end_inset

 be the search distribution,
 e.g.,
 Gaussian 
\begin_inset Formula $\delta\sim\mathcal{N}(0,I)$
\end_inset

,
 so that 
\begin_inset Formula $\theta=x+\sigma\delta$
\end_inset

.
 Here is a math trick:
\begin_inset Formula 
\begin{align*}
\mathbb{E}_{\pi(\theta|x)}[F(\theta)] & =\int F(\theta)\pi(\theta|x)d\theta\\
\nabla_{x}\mathbb{E}_{\pi(\theta|x)}[F(\theta)] & =\nabla_{x}\int F(\theta)\pi(\theta|x)d\theta\\
 & =\int F(\theta)\nabla_{x}\pi(\theta|x)d\theta\\
 & =\int F(\theta){\color{red}\frac{{\normalcolor \pi(\theta|x)}}{\pi(\theta|x)}}{\color{red}\nabla_{x}\pi(\theta|x)}d\theta\\
 & =\int\pi(\theta|x)F(\theta){\color{red}\nabla_{x}\log(\pi(\theta|x))}d\theta\\
 & =\mathbb{E}_{\pi(\theta|x)}\big[F(\theta)\nabla_{x}\log(\pi(\theta|x))\big]
\end{align*}

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Black-box Attack:
 Natural Evolution Strategy
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[13] Black-box Adversarial Attacks with Limited Queries and Information
\end_layout

\begin_layout Standard
When we use Gaussian as the search distribution,
 based on the previous page,
 we have
\begin_inset Formula 
\[
\nabla\mathbb{E}[F(\theta)]\approx\frac{1}{\sigma n}\sum_{i=1}^{n}\delta_{i}F(\theta+\sigma\delta_{i})
\]

\end_inset


\end_layout

\begin_layout Standard
That means the gradient can be estimated through a population of randomly sampled 
\begin_inset Formula $n$
\end_inset

 points.
 We can adopt this estimated gradient and perform basic iterative method mentioned before.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted12.png
	special width=0.5\linewidth

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Black-box Attack:
 SPSA
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[14] Adversarial Risk and the Dangers of Evaluating Against Weak Attacks
\end_layout

\begin_layout Standard
This is a variant of Natural Evolution Strategy (NES).
 It may better help you understand what this algorithm is doing.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Graphics
	filename pasted13.png
	special width=0.7\linewidth

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Comparison between white-box and black-box
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
White-Box Attack
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Black-Box Attack
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Effectiveness
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
high
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
much less than white-box
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Efficiency (cost)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
low
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
much higher (e.g.
 payed API calls)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Practical?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
much better than white-box
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Frame
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
,
\backslash
newline
\end_layout

\end_inset


\end_layout

\begin_layout Frame
There are also some more challenging scenarios for physical world attacks.
 They can survive the camera system as well compared to the attacks in the pure digital format.
 That's beyond the scope of discussion today.
\end_layout

\begin_layout Section
Adversarial Defense:
 Prevent the Attacks
\end_layout

\begin_layout Subsection
Adversarial Defense
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Section 3:
 Adversarial Defense
\end_layout

\end_inset


\end_layout

\begin_layout Frame
How to prevent the attacks,
 i.e.,
 making those models resistant to those 
\begin_inset Quotes eld
\end_inset

imperceptible perturbations
\begin_inset Quotes erd
\end_inset

?
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Previous Attempts for Adversarial Defense
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[15] On Adaptive Attacks to Adversarial Example Defenses
\end_layout

\begin_layout Description

\bar under
\begin_inset ERT
status open

\begin_layout Plain Layout

Adversarial Training:
\end_layout

\end_inset

 Augmenting training data with adversarial examples.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

Input Transformation/Preprocessing:
\end_layout

\end_inset

 Modifying inputs before feeding them to the model (e.g.,
 JPEG compression,
 spatial smoothing,
 randomization).
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

Model Modification:
\end_layout

\end_inset

 Changing the network architecture or training procedure (e.g.,
 defensive distillation - though largely broken).
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout

Attack Detection:
\end_layout

\end_inset

 Training separate detectors to identify adversarial inputs.
\end_layout

\begin_layout Description

\bar under
\begin_inset ERT
status open

\begin_layout Plain Layout

Certified Defenses:
\end_layout

\end_inset

 Provide mathematical guarantees of robustness within a specific perturbation bound (e.g,
 random smoothing).
\end_layout

\begin_layout Standard

\color red
!
 Everything except for adversarial training and certified defenses is fragile in some way.
 Some of them are easily to bypass.
 See paper [15] for details.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Defense:
 Adversarial Training
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[16] Towards Deep Learning Models Resistant to Adversarial Attacks
\end_layout

\end_deeper
\begin_layout Frame
Create adversarial examples (often using BIM/PGD) on-the-fly during training and include them in mini-batches.
\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Adversarial Training
\end_layout

\end_inset


\end_layout

\begin_layout Block
Notations:
 
\begin_inset Formula $\theta$
\end_inset

 for model parameters;
 
\begin_inset Formula $(x,y)$
\end_inset

 for (image,
 label) pair from the data distribution 
\begin_inset Formula $D$
\end_inset

;
 The adversarial perturbation is 
\begin_inset Formula $\delta$
\end_inset

,
 within a pre-defined bound 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Block
\begin_inset Formula 
\[
\min_{\theta}\rho(\theta),\quad\text{where}\quad\rho(\theta)=\mathbb{E}_{(x,y)\sim D}\Big[\max_{\delta\in S}L(\theta,x+\delta,y)\Big]
\]

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Pros:
\end_layout

\begin_deeper
\begin_layout Itemize
Currently the most effective empirical defense strategy.
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Cons:
\end_layout

\begin_deeper
\begin_layout Itemize
Computationally expensive (significantly increase the number of forward/backward passes).
\end_layout

\begin_layout Itemize
can slightly hurt accuracy on clean data ("robustness vs.
 accuracy trade-off").
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Defense:
 
\begin_inset Quotes eld
\end_inset

Free
\begin_inset Quotes erd
\end_inset

 Adversarial Training
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[17] Adversarial Training for Free!
\end_layout

\begin_layout Standard
Core idea:
 to reuse the gradient obtained from the normal learning process.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted14.png
	special width=\linewidth

\end_inset


\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Section
Adversarial Attack & Defense in Other Tasks
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Section 4:
 What about Other Tasks
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Attack and defense can happen in tasks other than classification.
\end_layout

\begin_layout Frame
For instance,
 in deep metric learning (a computer vision task that differs from classification).
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What is 
\begin_inset Quotes eld
\end_inset

Deep Metric Learning
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[17] FaceNet:
 A Unified Embedding for Face Recognition and Clustering
\end_layout

\begin_layout Columns

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
linewidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted15.png
	special width=\linewidth

\end_inset


\end_layout

\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.5
\backslash
linewidth
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted16.png
	special width=\linewidth

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Adversarial Attack in Deep Metric Learning
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[18] Adversarial Attack and Defense in Deep Ranking,
 T-PAMI 2024
\end_layout

\end_deeper
\begin_layout Frame
\begin_inset Graphics
	filename pasted17.png
	special width=\linewidth

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Adversarial Attack in Deep Metric Learning
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[19] Practical Relative Order Attack in Deep Ranking,
 ICCV 2021
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename pasted18.png
	special width=\linewidth

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Adversarial Defense in Deep Metric Learning
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
[20] Enhancing Adversarial Robustness for Deep Metric Learning
\end_layout

\begin_layout Standard
Adversarial training with triplet loss can be adopted.
 But there is a task specific issue – model collapse.
\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Hardness manipulation
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Graphics
	filename pasted19.png
	special width=0.4\linewidth

\end_inset


\end_layout

\begin_layout Block
Still adversarial training,
 but the process of creating adversarial examples early stops halfway.
 Namely,
 the image triplet during the training process is:
\end_layout

\begin_layout Block
\begin_inset Formula 
\[
\hat{r}_{a},\hat{r}_{p},\hat{r}_{n}=\arg\min_{r_{a},r_{n},r_{n}}\|\max(0,H_{D}-\tilde{H}_{S})\|_{2}^{2}
\]

\end_inset


\end_layout

\begin_layout Block
Then we can directly use triplet loss with this 
\begin_inset Quotes eld
\end_inset

adversarial triplet
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What about natural language?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Beyond today's scope,
 but good to know there is some difference.
\end_layout

\begin_layout Columns

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.47
\backslash
linewidth
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Manipulating Images
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Image shape:
 (height,
 width,
 channel)
\end_layout

\begin_layout Itemize
Data type:
 float (
\begin_inset Quotes eld
\end_inset

continuous
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
Naturally suitable for gradient-based optimization methods such as PGD,
 or zeroth-order methods such as NES.
\end_layout

\end_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

0.47
\backslash
linewidth
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Manipulating Language
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Language shape:
 (sequence length,
 1)
\end_layout

\begin_layout Itemize
Data type:
 int (discrete)
\end_layout

\begin_deeper
\begin_layout Itemize
each element is an token index (int) that corresponds to the pre-built dictionary.
\end_layout

\end_deeper
\begin_layout Standard
Gradient is a problem here.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Section*
Summary
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Deep learning models are pretty fragile.
\end_layout

\begin_layout Itemize
Deep learning models are surprisingly brittle.
\end_layout

\begin_layout Itemize
Adversarial attacks exploit model internals (gradients) or transferability.
\end_layout

\begin_layout Itemize
Adversarial training is the leading defense,
 but challenges remain.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vfill
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Comment:

\series default
 Good to know about the existence of AI vulnerability and mitigations.
\end_layout

\begin_layout Standard
LLM safety (e.g.,
 jailbreak) is a more heated discussion nowadays.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Thanks!
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Q/A Session.
\end_layout

\begin_layout Frame
The references can be found at the subtitles in the slides.
\end_layout

\end_body
\end_document
