#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{microtype}
\usepackage[margin=1in]{geometry}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
EN.520.665 Homework #1
\end_layout

\begin_layout Author
Mo Zhou <mzhou32@jhu.edu>
\end_layout

\begin_layout Section
Gaussian Smoothing Filter
\end_layout

\begin_layout Standard

\bar under
Justify the use of Gaussian smoothing filter in the context of a) Marr-Hildreth
 operator, 2) Canny edge detector and the SIFT operator.
 Compare and contrast the underlying assumptions and implications.
\end_layout

\begin_layout Standard
The 
\series bold
Marr-Hildreth Operator
\series default
 involves Gaussian filter in the form of LoG (Laplacian of Gaussian).
 Since differential operations may amplify noise, the Gaussian filter is
 used as a low-pass filter to suppress noise as well as smoothing the input.
 Specifically, the Marr-Hildreth operator involves the determination of
 zero crossings fo the second directional derivative, whicn means its has
 to compute
\begin_inset Formula $f(x,y)=D^{2}[G(\vec{r})*I(x,y)]=D^{2}G*I(x,y).$
\end_inset

 In this formulation, 
\begin_inset Formula $D^{2}G$
\end_inset

 is the Laplacian of Gaussian.
\end_layout

\begin_layout Standard
The 
\series bold
Canny Edge Detector
\series default
 also adopts Gaussian filter to smooth the input and reduce noise.
 It approximates a differential equation with the first derivative of the
 Gaussian.
 Canny Edge Detector assumes we are going to detect edges from an input
 with Gaussian noise: 
\begin_inset Formula $I(x)=Au_{-1}(x)+n(x)$
\end_inset

.
 The noise is expected to be zero-mean.
 
\end_layout

\begin_layout Standard
The 
\series bold
SIFT Operator
\series default
 adopts Gaussian filter for smoothing the input and reducing noise as well.
 SIFT allows multi-scale processing, and uses Gaussian smoothing to transform
 the input into scale space: 
\begin_inset Formula $L(x,y,\sigma)=G(x,y,\sigma)*I(x,y)$
\end_inset

.
\end_layout

\begin_layout Section
Sub-pixel Extraction
\end_layout

\begin_layout Standard

\bar under
Design a general algorithm for sub-pixel extraction of edges and key points.
\end_layout

\begin_layout Standard
Sub-pixels provide finer resolution compared to that of the pixel width,
 at a fraction of the pixel size (non-integer coordinates).
 A straightforward idea to provide sub-pixel level edge and key point detection
 is to apply existing algorithms on an upscaled input (via e.g., linear interpolat
ion), and then we can obtain the non-integer location of the edges and key
 points.
 For example, Marr-Hildreth Operator can be used to find the edges according
 to the zero crossings of the second derivative (Laplacian of Gaussian).
 SIFT can be used to find the keypoints according to the maxima and minima
 of the difference of Gaussians.
\end_layout

\begin_layout Section
SIFT
\end_layout

\begin_layout Standard

\bar under
Justify why SIFT is insensitive to scale, illumination and view point (restricte
d).
\end_layout

\begin_layout Standard

\series bold
Scale:
\series default
 The modeling of SIFT involves the scale space, from which the maxima and
 minima of the difference of Gaussians will be found.
 SIFT is insensitive to scale from the design.
\end_layout

\begin_layout Standard

\series bold
Illumination:
\series default
 Given a local image area, where the illumination is changed to be brighter
 (assume a constant is added to the local region, so the RGB values are
 closer to 255).
 In this case, the gradient in this local area is unchanged, and it does
 not affect the SIFT result.
\end_layout

\begin_layout Standard

\series bold
View Point:
\series default
 SIFT is merely somewhat insensitive to view point - the view point change
 should not be significant.
 Slight translation of object on an image is not expected to cause abrupt
 change in the keypoint descriptors and orientation histograms.
 The view point insensitiveness is also explained on page 20 of the course
 note.
\end_layout

\begin_layout Section
Rotational Invariance Extension
\end_layout

\begin_layout Standard

\bar under
Derive the rotational-invariance extension of the local binary pattern texture
 features.
\end_layout

\begin_layout Standard
Rotational invariance means we expect the same output (or at least very
 similar) from a rotated input.
 According to the LBP formulation (Eq.
 121 from the course note):
\begin_inset Formula 
\[
\text{LBP}_{P,R}=\sum_{p=0}^{P-1}s(g_{p}-g_{c})2^{p},
\]

\end_inset

different powers of 2 will be associated with different adjacent pixels
 after rotation, hence resulting in a different LBP value.
 The C value will not be changed.
\end_layout

\begin_layout Standard
A way to make it rotation-invariant is to rotate the weights, and calculate
 the sum of LBP over all possible rotated weights.
 For example, originally we have the weight matrix:
\begin_inset Formula 
\[
\begin{bmatrix}1 & 2 & 4\\
128 &  & 8\\
64 & 32 & 16
\end{bmatrix}
\]

\end_inset

Then we find all possible rotations of the weight matrix:
\begin_inset Formula 
\[
\begin{bmatrix}128 & 1 & 2\\
64 &  & 4\\
32 & 16 & 8
\end{bmatrix},\begin{bmatrix}64 & 128 & 1\\
32 &  & 2\\
16 & 8 & 4
\end{bmatrix},\ldots,\begin{bmatrix}2 & 4 & 8\\
1 &  & 16\\
128 & 64 & 32
\end{bmatrix}
\]

\end_inset

With all these 8 weight matrices, the sum of the corresponding outputs will
 remain the same even if the adjacent pixels rotates.
\end_layout

\end_body
\end_document
